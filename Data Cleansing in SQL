
#Data Cleaning

SELECT * 
FROM layoffs;

# 1. Remove Duplicates
# 2. Standardize the data
# 3. Null Values or Blank values
# 4. Remove any columns 

# Creating a Table "layoffs_staging" similar to layoffs (to maintain the structure)
CREATE TABLE layoffs_staging
LIKE layoffs;

SELECT *
FROM layoffs_staging;

INSERT layoffs_staging
SELECT 
* FROM layoffs;

# 1. Removing Duplicates
SELECT 
* FROM layoffs_staging;

# -- Finding duplicates using CTE and ROW_NUMBER()
WITH duplicates_CTE AS 
(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging
)
SELECT * 
FROM duplicates_CTE
WHERE row_num > 1;

# -- Verifying the above query.
SELECT 
* FROM layoffs_staging
WHERE company = 'Casper';

#Creating another staging layoffs so that main table remains intact
CREATE TABLE `layoffs_staging_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` text,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` text,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO layoffs_staging_2
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging;


SELECT * FROM layoffs_staging_2
WHERE row_num > 1;

# Delete, Update and Alter commands works only when safe_updates is set to False. 
SET SQL_SAFE_UPDATES = 0; 

# -- Deleting suplicate records.
DELETE
FROM layoffs_staging_2
WHERE row_num >= 2;

# 2. Standardizing data

# -- Removing and left and right white spaces
SELECT  company,(TRIM(company))
FROM layoffs_staging_2;

UPDATE layoffs_staging_2
SET company = TRIM(company);

# -- Crypto inductry is entered in mutilple ways, so standardizing and making it one
SELECT  DISTINCT (industry) 
FROM layoffs_staging_2
ORDER BY 1;

SELECT * 
FROM layoffs_staging_2
WHERE industry LIKE '%Crypto%';

UPDATE layoffs_staging_2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

SELECT  DISTINCT (industry)
FROM layoffs_staging_2
ORDER BY 1;

# -- Standardizing coountry column
SELECT *
FROM layoffs_staging_2
WHERE country LIKE 'United States%';

SELECT  DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging_2
ORDER BY 1;

UPDATE layoffs_staging_2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

SELECT  DISTINCT country
FROM layoffs_staging_2
ORDER BY 1;

# -- Standardizing date column to YYYY-MM-DD format
SELECT `date`,
str_to_date(`date`, '%m/%d/%Y')
FROM layoffs_staging_2;

# To address nulls in the date column because UPDATE command was not accepted due to Error Code: 1411. Incorrect datetime value: 'NULL' for function str_to_date

UPDATE layoffs_staging_2 
SET `date` = NULL
WHERE `date` = 'NULL' OR `date` = '';

UPDATE layoffs_staging_2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

# -- Converting Data types
ALTER TABLE layoffs_staging_2 
MODIFY COLUMN `date` DATE;

ALTER TABLE layoffs_staging_2
MODIFY COLUMN total_laid_off INT;

ALTER TABLE layoffs_staging_2
MODIFY COLUMN funds_raised_millions INT;

/* -- Null values are typed, hence NULL as keyword did not work. Here, "column_name = 'NULL'" actually works, 
but it should ideally be "column_name IS NULL"
Hence converting all Null as words or blanks to NULL as keyword. 
*/

UPDATE layoffs_staging_2
SET total_laid_off = NULL
WHERE total_laid_off = 'NULL' OR total_laid_off = '';


UPDATE layoffs_staging_2
SET percentage_laid_off = NULL
WHERE percentage_laid_off = 'NULL' OR percentage_laid_off = '';

UPDATE layoffs_staging_2
SET stage = NULL
WHERE stage = 'NULL' OR stage = '';

UPDATE layoffs_staging_2
SET country = NULL
WHERE country = 'NULL' OR country = '';

UPDATE layoffs_staging_2
SET funds_raised_millions = NULL
WHERE funds_raised_millions = 'NULL' OR funds_raised_millions = '';

UPDATE layoffs_staging_2
SET industry = NULL
WHERE industry = 'NULL' OR industry = '';

# -- Replacing NULL or blanks wherever possible.
SELECT * 
FROM layoffs_staging_2
WHERE company = 'Ahead';

SELECT * 
FROM layoffs_staging_2 t1
JOIN layoffs_staging_2 t2
	ON t1.company = t2.company
	AND t1.location = t2.location
WHERE (t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;

UPDATE layoffs_staging_2 t1
JOIN layoffs_staging_2 t2
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE (t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;

# -- Without both total_laid_off and perecent_laid_off makes us think if the company actually laid off employees. Hence removing such rows.
SELECT *
FROM layoffs_staging_2
WHERE total_laid_off IS NULL 
AND percentage_laid_off IS NULL;

DELETE
FROM layoffs_staging_2
WHERE total_laid_off IS NULL 
AND percentage_laid_off IS NULL;

# -- Removing row_num column created to identify duplicate records. 
ALTER TABLE layoffs_staging_2
DROP COLUMN row_num;

SELECT * 
FROM layoffs_staging_2;










